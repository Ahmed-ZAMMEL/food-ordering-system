<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.food.ordering.system</groupId>
        <artifactId>order-domain</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>order-application-service</artifactId>

    <properties>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.food.ordering.system</groupId>
            <artifactId>order-domain-core</artifactId>
        </dependency>
        <!-- We add common-domain because we will use order-domain-core-->
        <dependency>
            <groupId>com.food.ordering.system</groupId>
            <artifactId>common-domain</artifactId>
        </dependency>
        <!-- Additionally, as we mentioned in this layer, we will handle data validations and transactions.
        For this purpose, we will add Spring Boot Starter Validation dependency. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- To use transactional annotations of spring, we will add Spring TX dependency.
             As you see, as opposed to the domain core module, here we started making use
             of framework abilities to make development easier.
             However, we do this only in the level of the application service, not in the domain core,
             which has the core domain logic.
         -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>
    </dependencies>

</project>